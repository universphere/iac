- name: ensure Keycloak volumes are present
  become: true
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
  loop:
    - "{{ keycloak_volume }}"
    - "{{ keycloak_volume_pg_data }}"

- name: copy file .env
  become: true
  ansible.builtin.copy:
    src: .env
    dest: "{{ keycloak_volume }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: install postgres database
  community.docker.docker_container:
    name: postgres
    image: postgres
    state: started
    restart: "{{ restart }}" # Force restart
    recreate: "{{ recreate }}" # Force recreate
    restart_policy: "always"
    env_file: "{{keycloak_volume}}/.env"
    volumes:
      - "{{ keycloak_volume_pg_data }}:/var/lib/postgresql/data"
    networks:
      - name: "{{ keycloak_postgres_network }}"

- name: "restart: {{ restart }} and recreate: {{ recreate }} Keycloak"
  community.docker.docker_container:
    name: keycloak
    image: quay.io/keycloak/keycloak
    state: started
    restart: "{{ restart }}" # Force restart
    recreate: "{{ recreate }}" # Force recreate
    restart_policy: "always"
    labels:
      traefik.enable: "true"
      traefik.http.routers.gitlab.rule: "Host(`id.universphere.cloud`)"
      traefik.http.routers.gitlab.entrypoints: "websecure"
      traefik.http.routers.gitlab.tls.certresolver: "myresolver"
    env_file: "{{keycloak_volume}}/.env"
    networks:
    - name: "{{ keycloak_postgres_network }}"
    command:
      - start â€“hostname id.universphere.cloud
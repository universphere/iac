- name: Create a Keycloak client_scope with some custom attributes
  community.general.keycloak_clientscope:
    auth_keycloak_url: "{{ auth_keycloak_url }}"
    auth_username: "{{ auth_username }}"
    auth_password: "{{ auth_password }}"
    auth_realm: "{{ realm }}"
    name: my-new_clientscope
    description: description-of-clientscope
    protocol: openid-connect
    protocol_mappers:
      - config:
          access.token.claim: true
          claim.name: "policy"
          id.token.claim: true
          jsonType.label: String
          user.attribute: policy
          userinfo.token.claim: true
          multivalued: true
          aggregate.attrs: true
        name: minio-policy-mapper
        protocol: openid-connect
        protocolMapper: oidc-usermodel-property-mapper

- name: Create or update a Keycloak client (with all the bells and whistles)
  community.general.keycloak_client:
    auth_keycloak_url: "{{ auth_keycloak_url }}"
    auth_username: "{{ auth_username }}"
    auth_password: "{{ auth_password }}"
    auth_realm: "{{ realm }}"
    state: present
    client_id: miniofoo
    name: test-name
    description: This is the universphere minio client
    root_url: https://www.example.com/
    admin_url: https://www.example.com/admin_url
    enabled: true
    bearerOnly: false
    client_authenticator_type: client-secret
    secret: REALLYWELLKEPTSECRET
    redirect_uris:
      - https://www.example.com/*
      - http://localhost:8888/
    web_origins:
      - https://www.example.com/*
    standard_flow_enabled: true
    implicit_flow_enabled: false
    direct_access_grants_enabled: true
    service_accounts_enabled: true
    authorization_services_enabled: true
    public_client: false
    frontchannel_logout: true
    protocol: openid-connect
    default_client_scopes:
      - email
      - profile
      - roles
      - my-new_clientscope
    optional_client_scopes:
      - acr
      - address
      - microprofile-jwt
      - offline_access
      - phone